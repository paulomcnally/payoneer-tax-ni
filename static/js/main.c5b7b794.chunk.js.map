{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useForm","register","handleSubmit","errors","useReducer","state","action","type","bankTax","amount","value","Error","dispatch","className","onSubmit","data","parseFloat","htmlFor","id","name","ref","required","pattern","role","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAGe,SAASA,IACtB,IAD4B,EAKeC,cAAnCC,EALoB,EAKpBA,SAAUC,EALU,EAKVA,aAAcC,EALJ,EAKIA,OALJ,MAuBFC,sBAd1B,SAAiBC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,YACH,IAAMC,EALc,IAKiBF,EAAOG,OAAU,IAEtD,MAAO,CACLD,UACAE,MAHYJ,EAAOG,OAASD,EAPhB,MAYhB,QACE,MAAM,IAAIG,SAlBK,CACnBH,QAAS,EACTE,MAAO,IAHmB,mBAuBrBL,EAvBqB,KAuBdO,EAvBc,KA6B5B,OACE,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,uDACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eAAf,qDAGA,yBAAKA,UAAU,aACb,0BAAMC,SAAUZ,GAbX,SAACa,GAChBH,EAAS,CAAEL,KAAM,YAAaE,OAAQO,WAAWD,EAAKN,cAa1C,yBAAKI,UAAU,cACb,2BAAOI,QAAQ,UAAf,2BACA,2BAAOC,GAAG,SAASC,KAAK,SAASN,UAAU,+BAA+BO,IAAKnB,EAAS,CAAEoB,UAAU,EAAMC,QAAS,yBAEpHnB,EAAOM,QAAU,yBAAKI,UAAU,qBAAqBU,KAAK,SAAzC,2CAClB,4BAAQV,UAAU,gCAAgCW,SAAUrB,EAAOM,OAAQF,KAAK,UAAhF,aAEF,2BAAOM,UAAU,6BACf,+BACE,4BACE,uCACA,uCAGJ,+BACE,4BACE,wCACA,gCAlDE,OAuDJ,4BACE,qCACA,gCAEGR,EAAMG,QACN,IAHH,IAxDQ,IAwDR,OASF,4BACE,sCACA,gCAEGH,EAAMK,eCnETe,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjC,EAAD,OAEFkC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c5b7b794.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nimport { useForm } from 'react-hook-form';\n\nexport default function App() {\n  const initialState = {\n    bankTax: 0,\n    value: 0,\n  };\n  const { register, handleSubmit, errors } = useForm();\n  const payoneerTax = 3.15;\n  const bankTaxPercentage = 1.8;\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'calculate':\n        const bankTax = (bankTaxPercentage * action.amount) / 100;\n        const value = action.amount + bankTax + payoneerTax;\n        return {\n          bankTax,\n          value,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const onSubmit = (data) => {\n    dispatch({ type: 'calculate', amount: parseFloat(data.amount) });\n  };\n\n  return (\n    <div className=\"container-fluid h-100\">\n      <div className=\"row justify-content-center align-items-center h-100\">\n        <div className=\"col col-sm-6 col-md-6 col-lg-4 col-xl-3\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              Calculadora de impuestos de Payoneer en Nicaragua\n            </div>\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"amount\">Monto a retirar del ATM</label>\n                  <input id=\"amount\" name=\"amount\" className=\"form-control form-control-lg\" ref={register({ required: true, pattern: /^\\d+(\\.\\d{1,2})?$/ })} />\n                </div>\n                {errors.amount && <div className=\"alert alert-danger\" role=\"alert\">Se espera un entero o decimal positivo.</div>}\n                <button className=\"btn btn-info btn-lg btn-block\" disabled={errors.amount} type=\"submit\">Calcular</button>\n              </form>\n              <table className=\"table table-bordered mt-3\">\n                <thead>\n                  <tr>\n                    <th>Entidad</th>\n                    <th>Monto</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Payoneer</td>\n                    <td>\n                      $\n                      {payoneerTax}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Banco</td>\n                    <td>\n                      $\n                      {state.bankTax}\n                      {' '}\n                      (\n                      {bankTaxPercentage}\n                      %)\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Total:</td>\n                    <td>\n                      $\n                      {state.value}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}